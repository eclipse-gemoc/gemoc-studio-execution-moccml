/*
 * generated by Xtext
 */
package org.eclipse.gemoc.execution.moccml.testscenariolang.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class TestScenarioLangGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ScenarioElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.execution.moccml.testscenariolang.xtext.TestScenarioLang.Scenario");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cScenarioAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cScenarioKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Alternatives cAlternatives_3_0 = (Alternatives)cGroup_3.eContents().get(0);
		private final Assignment cModelImportsAssignment_3_0_0 = (Assignment)cAlternatives_3_0.eContents().get(0);
		private final RuleCall cModelImportsImportStatementParserRuleCall_3_0_0_0 = (RuleCall)cModelImportsAssignment_3_0_0.eContents().get(0);
		private final Assignment cClassImportsAssignment_3_0_1 = (Assignment)cAlternatives_3_0.eContents().get(1);
		private final RuleCall cClassImportsImportJavaStatementParserRuleCall_3_0_1_0 = (RuleCall)cClassImportsAssignment_3_0_1.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Assignment cModelImportsAssignment_3_1_0 = (Assignment)cAlternatives_3_1.eContents().get(0);
		private final RuleCall cModelImportsImportStatementParserRuleCall_3_1_0_0 = (RuleCall)cModelImportsAssignment_3_1_0.eContents().get(0);
		private final Assignment cClassImportsAssignment_3_1_1 = (Assignment)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cClassImportsImportJavaStatementParserRuleCall_3_1_1_0 = (RuleCall)cClassImportsAssignment_3_1_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cVariablesAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cVariablesObjectVariableParserRuleCall_4_0_0 = (RuleCall)cVariablesAssignment_4_0.eContents().get(0);
		private final Assignment cVariablesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cVariablesObjectVariableParserRuleCall_4_1_0 = (RuleCall)cVariablesAssignment_4_1.eContents().get(0);
		private final Assignment cStatementSequenceAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cStatementSequenceStatementParserRuleCall_5_0 = (RuleCall)cStatementSequenceAssignment_5.eContents().get(0);
		
		//Scenario:
		//	{Scenario}
		//	'Scenario' name=EString? ((modelImports+=ImportStatement
		//	| classImports+=ImportJavaStatement) (modelImports+=ImportStatement | classImports+=ImportJavaStatement)*)?
		//	(variables+=ObjectVariable variables+=ObjectVariable*)?
		//	statementSequence+=Statement+;
		@Override public ParserRule getRule() { return rule; }

		//{Scenario}
		//'Scenario' name=EString? ((modelImports+=ImportStatement
		//| classImports+=ImportJavaStatement) (modelImports+=ImportStatement | classImports+=ImportJavaStatement)*)?
		//(variables+=ObjectVariable variables+=ObjectVariable*)?
		//statementSequence+=Statement+
		public Group getGroup() { return cGroup; }

		//{Scenario}
		public Action getScenarioAction_0() { return cScenarioAction_0; }

		//'Scenario'
		public Keyword getScenarioKeyword_1() { return cScenarioKeyword_1; }

		//name=EString?
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }

		//((modelImports+=ImportStatement
		//| classImports+=ImportJavaStatement) (modelImports+=ImportStatement | classImports+=ImportJavaStatement)*)?
		public Group getGroup_3() { return cGroup_3; }

		//(modelImports+=ImportStatement
		//| classImports+=ImportJavaStatement)
		public Alternatives getAlternatives_3_0() { return cAlternatives_3_0; }

		//modelImports+=ImportStatement
		public Assignment getModelImportsAssignment_3_0_0() { return cModelImportsAssignment_3_0_0; }

		//ImportStatement
		public RuleCall getModelImportsImportStatementParserRuleCall_3_0_0_0() { return cModelImportsImportStatementParserRuleCall_3_0_0_0; }

		//classImports+=ImportJavaStatement
		public Assignment getClassImportsAssignment_3_0_1() { return cClassImportsAssignment_3_0_1; }

		//ImportJavaStatement
		public RuleCall getClassImportsImportJavaStatementParserRuleCall_3_0_1_0() { return cClassImportsImportJavaStatementParserRuleCall_3_0_1_0; }

		//(modelImports+=ImportStatement | classImports+=ImportJavaStatement)*
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }

		//modelImports+=ImportStatement
		public Assignment getModelImportsAssignment_3_1_0() { return cModelImportsAssignment_3_1_0; }

		//ImportStatement
		public RuleCall getModelImportsImportStatementParserRuleCall_3_1_0_0() { return cModelImportsImportStatementParserRuleCall_3_1_0_0; }

		//classImports+=ImportJavaStatement
		public Assignment getClassImportsAssignment_3_1_1() { return cClassImportsAssignment_3_1_1; }

		//ImportJavaStatement
		public RuleCall getClassImportsImportJavaStatementParserRuleCall_3_1_1_0() { return cClassImportsImportJavaStatementParserRuleCall_3_1_1_0; }

		//(variables+=ObjectVariable variables+=ObjectVariable*)?
		public Group getGroup_4() { return cGroup_4; }

		//variables+=ObjectVariable
		public Assignment getVariablesAssignment_4_0() { return cVariablesAssignment_4_0; }

		//ObjectVariable
		public RuleCall getVariablesObjectVariableParserRuleCall_4_0_0() { return cVariablesObjectVariableParserRuleCall_4_0_0; }

		//variables+=ObjectVariable*
		public Assignment getVariablesAssignment_4_1() { return cVariablesAssignment_4_1; }

		//ObjectVariable
		public RuleCall getVariablesObjectVariableParserRuleCall_4_1_0() { return cVariablesObjectVariableParserRuleCall_4_1_0; }

		//statementSequence+=Statement+
		public Assignment getStatementSequenceAssignment_5() { return cStatementSequenceAssignment_5; }

		//Statement
		public RuleCall getStatementSequenceStatementParserRuleCall_5_0() { return cStatementSequenceStatementParserRuleCall_5_0; }
	}

	public class ImportStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.execution.moccml.testscenariolang.xtext.TestScenarioLang.ImportStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cImportURIAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportURIEStringParserRuleCall_1_0 = (RuleCall)cImportURIAssignment_1.eContents().get(0);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cAliasAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cAliasSemicolonKeyword_2_0_0 = (Keyword)cAliasAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cAsKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cAliasAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cAliasEStringParserRuleCall_2_1_1_0 = (RuleCall)cAliasAssignment_2_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//ImportStatement TimeModel::ImportStatement:
		//	'importModel'
		//	importURI=EString (alias=';' | 'as' alias=EString ';');
		@Override public ParserRule getRule() { return rule; }

		//'importModel'
		//importURI=EString (alias=';' | 'as' alias=EString ';')
		public Group getGroup() { return cGroup; }

		//'importModel'
		public Keyword getImportModelKeyword_0() { return cImportModelKeyword_0; }

		//importURI=EString
		public Assignment getImportURIAssignment_1() { return cImportURIAssignment_1; }

		//EString
		public RuleCall getImportURIEStringParserRuleCall_1_0() { return cImportURIEStringParserRuleCall_1_0; }

		//(alias=';' | 'as' alias=EString ';')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//alias=';'
		public Assignment getAliasAssignment_2_0() { return cAliasAssignment_2_0; }

		//';'
		public Keyword getAliasSemicolonKeyword_2_0_0() { return cAliasSemicolonKeyword_2_0_0; }

		//'as' alias=EString ';'
		public Group getGroup_2_1() { return cGroup_2_1; }

		//'as'
		public Keyword getAsKeyword_2_1_0() { return cAsKeyword_2_1_0; }

		//alias=EString
		public Assignment getAliasAssignment_2_1_1() { return cAliasAssignment_2_1_1; }

		//EString
		public RuleCall getAliasEStringParserRuleCall_2_1_1_0() { return cAliasEStringParserRuleCall_2_1_1_0; }

		//';'
		public Keyword getSemicolonKeyword_2_1_2() { return cSemicolonKeyword_2_1_2; }
	}

	public class ImportJavaStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.execution.moccml.testscenariolang.xtext.TestScenarioLang.ImportJavaStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Keyword cImportClassKeyword_0_0_0 = (Keyword)cGroup_0_0.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_0_0_1 = (Assignment)cGroup_0_0.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameParserRuleCall_0_0_1_0 = (RuleCall)cImportedNamespaceAssignment_0_0_1.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Keyword cImportPackageKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cImportedNamespaceAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_0_1_1_0 = (RuleCall)cImportedNamespaceAssignment_0_1_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ImportJavaStatement:
		//	('importClass' importedNamespace=QualifiedName
		//	| 'importPackage' importedNamespace=QualifiedNameWithWildCard) ';';
		@Override public ParserRule getRule() { return rule; }

		//('importClass' importedNamespace=QualifiedName
		//| 'importPackage' importedNamespace=QualifiedNameWithWildCard) ';'
		public Group getGroup() { return cGroup; }

		//('importClass' importedNamespace=QualifiedName
		//| 'importPackage' importedNamespace=QualifiedNameWithWildCard)
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//'importClass' importedNamespace=QualifiedName
		public Group getGroup_0_0() { return cGroup_0_0; }

		//'importClass'
		public Keyword getImportClassKeyword_0_0_0() { return cImportClassKeyword_0_0_0; }

		//importedNamespace=QualifiedName
		public Assignment getImportedNamespaceAssignment_0_0_1() { return cImportedNamespaceAssignment_0_0_1; }

		//QualifiedName
		public RuleCall getImportedNamespaceQualifiedNameParserRuleCall_0_0_1_0() { return cImportedNamespaceQualifiedNameParserRuleCall_0_0_1_0; }

		//'importPackage' importedNamespace=QualifiedNameWithWildCard
		public Group getGroup_0_1() { return cGroup_0_1; }

		//'importPackage'
		public Keyword getImportPackageKeyword_0_1_0() { return cImportPackageKeyword_0_1_0; }

		//importedNamespace=QualifiedNameWithWildCard
		public Assignment getImportedNamespaceAssignment_0_1_1() { return cImportedNamespaceAssignment_0_1_1; }

		//QualifiedNameWithWildCard
		public RuleCall getImportedNamespaceQualifiedNameWithWildCardParserRuleCall_0_1_1_0() { return cImportedNamespaceQualifiedNameWithWildCardParserRuleCall_0_1_1_0; }

		//';'
		public Keyword getSemicolonKeyword_1() { return cSemicolonKeyword_1; }
	}

	public class ObjectVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.execution.moccml.testscenariolang.xtext.TestScenarioLang.ObjectVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVariableKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeJvmTypeReferenceParserRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ObjectVariable:
		//	'Variable'
		//	name=EString
		//	':' type=JvmTypeReference
		//	';';
		@Override public ParserRule getRule() { return rule; }

		//'Variable'
		//name=EString
		//':' type=JvmTypeReference
		//';'
		public Group getGroup() { return cGroup; }

		//'Variable'
		public Keyword getVariableKeyword_0() { return cVariableKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }

		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=JvmTypeReference
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//JvmTypeReference
		public RuleCall getTypeJvmTypeReferenceParserRuleCall_3_0() { return cTypeJvmTypeReferenceParserRuleCall_3_0; }

		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class QualifiedNameWithWildCardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.execution.moccml.testscenariolang.xtext.TestScenarioLang.QualifiedNameWithWildCard");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cQualifiedNameParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAsteriskKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//QualifiedNameWithWildCard:
		//	QualifiedName '.' '*';
		@Override public ParserRule getRule() { return rule; }

		//QualifiedName '.' '*'
		public Group getGroup() { return cGroup; }

		//QualifiedName
		public RuleCall getQualifiedNameParserRuleCall_0() { return cQualifiedNameParserRuleCall_0; }

		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }

		//'*'
		public Keyword getAsteriskKeyword_2() { return cAsteriskKeyword_2; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.execution.moccml.testscenariolang.xtext.TestScenarioLang.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }

		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class JvmTypeReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.execution.moccml.testscenariolang.xtext.TestScenarioLang.JvmTypeReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJvmAnyTypeReferenceAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTypeJvmTypeCrossReference_1_0 = (CrossReference)cTypeAssignment_1.eContents().get(0);
		private final RuleCall cTypeJvmTypeQualifiedNameParserRuleCall_1_0_1 = (RuleCall)cTypeJvmTypeCrossReference_1_0.eContents().get(1);
		
		//JvmTypeReference types::JvmTypeReference:
		//	{types::JvmAnyTypeReference} type=[types::JvmType|QualifiedName];
		@Override public ParserRule getRule() { return rule; }

		//{types::JvmAnyTypeReference} type=[types::JvmType|QualifiedName]
		public Group getGroup() { return cGroup; }

		//{types::JvmAnyTypeReference}
		public Action getJvmAnyTypeReferenceAction_0() { return cJvmAnyTypeReferenceAction_0; }

		//type=[types::JvmType|QualifiedName]
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }

		//[types::JvmType|QualifiedName]
		public CrossReference getTypeJvmTypeCrossReference_1_0() { return cTypeJvmTypeCrossReference_1_0; }

		//QualifiedName
		public RuleCall getTypeJvmTypeQualifiedNameParserRuleCall_1_0_1() { return cTypeJvmTypeQualifiedNameParserRuleCall_1_0_1; }
	}

	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.execution.moccml.testscenariolang.xtext.TestScenarioLang.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMseStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRewritingRuleCallStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Statement:
		//	MseStatement /* | RelationBehavior */ | RewritingRuleCallStatement;
		@Override public ParserRule getRule() { return rule; }

		//MseStatement /* | RelationBehavior */ | RewritingRuleCallStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//MseStatement
		public RuleCall getMseStatementParserRuleCall_0() { return cMseStatementParserRuleCall_0; }

		//RewritingRuleCallStatement
		public RuleCall getRewritingRuleCallStatementParserRuleCall_1() { return cRewritingRuleCallStatementParserRuleCall_1; }
	}

	public class MseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.execution.moccml.testscenariolang.xtext.TestScenarioLang.MseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExpectKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cMseStatementAction_1 = (Action)cGroup.eContents().get(1);
		private final Assignment cClocksAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cClocksClockCrossReference_2_0 = (CrossReference)cClocksAssignment_2.eContents().get(0);
		private final RuleCall cClocksClockIDTerminalRuleCall_2_0_1 = (RuleCall)cClocksClockCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cAndKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cClocksAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cClocksClockCrossReference_3_1_0 = (CrossReference)cClocksAssignment_3_1.eContents().get(0);
		private final RuleCall cClocksClockIDTerminalRuleCall_3_1_0_1 = (RuleCall)cClocksClockCrossReference_3_1_0.eContents().get(1);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//MseStatement:
		//	'expect' {MseStatement} clocks+=[TimeModel::Clock] ('and' clocks+=[TimeModel::Clock])*
		//	';'?;
		@Override public ParserRule getRule() { return rule; }

		//'expect' {MseStatement} clocks+=[TimeModel::Clock] ('and' clocks+=[TimeModel::Clock])*
		//';'?
		public Group getGroup() { return cGroup; }

		//'expect'
		public Keyword getExpectKeyword_0() { return cExpectKeyword_0; }

		//{MseStatement}
		public Action getMseStatementAction_1() { return cMseStatementAction_1; }

		//clocks+=[TimeModel::Clock]
		public Assignment getClocksAssignment_2() { return cClocksAssignment_2; }

		//[TimeModel::Clock]
		public CrossReference getClocksClockCrossReference_2_0() { return cClocksClockCrossReference_2_0; }

		//ID
		public RuleCall getClocksClockIDTerminalRuleCall_2_0_1() { return cClocksClockIDTerminalRuleCall_2_0_1; }

		//('and' clocks+=[TimeModel::Clock])*
		public Group getGroup_3() { return cGroup_3; }

		//'and'
		public Keyword getAndKeyword_3_0() { return cAndKeyword_3_0; }

		//clocks+=[TimeModel::Clock]
		public Assignment getClocksAssignment_3_1() { return cClocksAssignment_3_1; }

		//[TimeModel::Clock]
		public CrossReference getClocksClockCrossReference_3_1_0() { return cClocksClockCrossReference_3_1_0; }

		//ID
		public RuleCall getClocksClockIDTerminalRuleCall_3_1_0_1() { return cClocksClockIDTerminalRuleCall_3_1_0_1; }

		//';'?
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}

	public class RewritingRuleCallStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.execution.moccml.testscenariolang.xtext.TestScenarioLang.RewritingRuleCallStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecuteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cRewritingRuleCallStatementAction_1 = (Action)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cObjectVariableAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final CrossReference cObjectVariableObjectVariableCrossReference_2_0_0 = (CrossReference)cObjectVariableAssignment_2_0.eContents().get(0);
		private final RuleCall cObjectVariableObjectVariableIDTerminalRuleCall_2_0_0_1 = (RuleCall)cObjectVariableObjectVariableCrossReference_2_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cMethodAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cMethodJvmOperationCrossReference_2_2_0 = (CrossReference)cMethodAssignment_2_2.eContents().get(0);
		private final RuleCall cMethodJvmOperationIDTerminalRuleCall_2_2_0_1 = (RuleCall)cMethodJvmOperationCrossReference_2_2_0.eContents().get(1);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Group cGroup_2_3_1 = (Group)cGroup_2_3.eContents().get(1);
		private final Assignment cParametersAssignment_2_3_1_0 = (Assignment)cGroup_2_3_1.eContents().get(0);
		private final RuleCall cParametersVariableParserRuleCall_2_3_1_0_0 = (RuleCall)cParametersAssignment_2_3_1_0.eContents().get(0);
		private final Group cGroup_2_3_1_1 = (Group)cGroup_2_3_1.eContents().get(1);
		private final Keyword cCommaKeyword_2_3_1_1_0 = (Keyword)cGroup_2_3_1_1.eContents().get(0);
		private final Assignment cParametersAssignment_2_3_1_1_1 = (Assignment)cGroup_2_3_1_1.eContents().get(1);
		private final RuleCall cParametersVariableParserRuleCall_2_3_1_1_1_0 = (RuleCall)cParametersAssignment_2_3_1_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_3_2 = (Keyword)cGroup_2_3.eContents().get(2);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//RewritingRuleCallStatement:
		//	'execute' {RewritingRuleCallStatement} (objectVariable=[ObjectVariable] '.' method=[types::JvmOperation] ('('
		//	(parameters+=Variable (','parameters+=Variable)*)* ')')?)
		//	';'?;
		@Override public ParserRule getRule() { return rule; }

		//'execute' {RewritingRuleCallStatement} (objectVariable=[ObjectVariable] '.' method=[types::JvmOperation] ('('
		//(parameters+=Variable (','parameters+=Variable)*)* ')')?)
		//';'?
		public Group getGroup() { return cGroup; }

		//'execute'
		public Keyword getExecuteKeyword_0() { return cExecuteKeyword_0; }

		//{RewritingRuleCallStatement}
		public Action getRewritingRuleCallStatementAction_1() { return cRewritingRuleCallStatementAction_1; }

		//(objectVariable=[ObjectVariable] '.' method=[types::JvmOperation] ('(' (parameters+=Variable (','parameters+=Variable)*)*
		//')')?)
		public Group getGroup_2() { return cGroup_2; }

		//objectVariable=[ObjectVariable]
		public Assignment getObjectVariableAssignment_2_0() { return cObjectVariableAssignment_2_0; }

		//[ObjectVariable]
		public CrossReference getObjectVariableObjectVariableCrossReference_2_0_0() { return cObjectVariableObjectVariableCrossReference_2_0_0; }

		//ID
		public RuleCall getObjectVariableObjectVariableIDTerminalRuleCall_2_0_0_1() { return cObjectVariableObjectVariableIDTerminalRuleCall_2_0_0_1; }

		//'.'
		public Keyword getFullStopKeyword_2_1() { return cFullStopKeyword_2_1; }

		//method=[types::JvmOperation]
		public Assignment getMethodAssignment_2_2() { return cMethodAssignment_2_2; }

		//[types::JvmOperation]
		public CrossReference getMethodJvmOperationCrossReference_2_2_0() { return cMethodJvmOperationCrossReference_2_2_0; }

		//ID
		public RuleCall getMethodJvmOperationIDTerminalRuleCall_2_2_0_1() { return cMethodJvmOperationIDTerminalRuleCall_2_2_0_1; }

		//('(' (parameters+=Variable (','parameters+=Variable)*)* ')')?
		public Group getGroup_2_3() { return cGroup_2_3; }

		//'('
		public Keyword getLeftParenthesisKeyword_2_3_0() { return cLeftParenthesisKeyword_2_3_0; }

		//(parameters+=Variable (','parameters+=Variable)*)*
		public Group getGroup_2_3_1() { return cGroup_2_3_1; }

		//parameters+=Variable
		public Assignment getParametersAssignment_2_3_1_0() { return cParametersAssignment_2_3_1_0; }

		//Variable
		public RuleCall getParametersVariableParserRuleCall_2_3_1_0_0() { return cParametersVariableParserRuleCall_2_3_1_0_0; }

		//(','parameters+=Variable)*
		public Group getGroup_2_3_1_1() { return cGroup_2_3_1_1; }

		//','
		public Keyword getCommaKeyword_2_3_1_1_0() { return cCommaKeyword_2_3_1_1_0; }

		//parameters+=Variable
		public Assignment getParametersAssignment_2_3_1_1_1() { return cParametersAssignment_2_3_1_1_1; }

		//Variable
		public RuleCall getParametersVariableParserRuleCall_2_3_1_1_1_0() { return cParametersVariableParserRuleCall_2_3_1_1_1_0; }

		//')'
		public Keyword getRightParenthesisKeyword_2_3_2() { return cRightParenthesisKeyword_2_3_2; }

		//';'?
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}

	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.execution.moccml.testscenariolang.xtext.TestScenarioLang.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStringLiteralParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEObjectRefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Variable:
		//	IntegerLiteral | StringLiteral | EObjectRef;
		@Override public ParserRule getRule() { return rule; }

		///*VariableRef |*/ IntegerLiteral | StringLiteral | EObjectRef
		public Alternatives getAlternatives() { return cAlternatives; }

		///*VariableRef |*/ IntegerLiteral
		public RuleCall getIntegerLiteralParserRuleCall_0() { return cIntegerLiteralParserRuleCall_0; }

		//StringLiteral
		public RuleCall getStringLiteralParserRuleCall_1() { return cStringLiteralParserRuleCall_1; }

		//EObjectRef
		public RuleCall getEObjectRefParserRuleCall_2() { return cEObjectRefParserRuleCall_2; }
	}

	public class EObjectRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.execution.moccml.testscenariolang.xtext.TestScenarioLang.EObjectRef");
		private final Assignment cObjectAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cObjectEObjectCrossReference_0 = (CrossReference)cObjectAssignment.eContents().get(0);
		private final RuleCall cObjectEObjectQualifiedNameParserRuleCall_0_1 = (RuleCall)cObjectEObjectCrossReference_0.eContents().get(1);
		
		//EObjectRef:
		//	object=[ecore::EObject|QualifiedName];
		@Override public ParserRule getRule() { return rule; }

		//object=[ecore::EObject|QualifiedName]
		public Assignment getObjectAssignment() { return cObjectAssignment; }

		//[ecore::EObject|QualifiedName]
		public CrossReference getObjectEObjectCrossReference_0() { return cObjectEObjectCrossReference_0; }

		//QualifiedName
		public RuleCall getObjectEObjectQualifiedNameParserRuleCall_0_1() { return cObjectEObjectQualifiedNameParserRuleCall_0_1; }
	}

	public class StringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.execution.moccml.testscenariolang.xtext.TestScenarioLang.StringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringLiteral:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class IntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.execution.moccml.testscenariolang.xtext.TestScenarioLang.IntegerLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		///*VariableRef:
		// * 	var=[ObjectVariable|ID]
		// ;*/
		//IntegerLiteral:
		//	value=INT;
		@Override public ParserRule getRule() { return rule; }

		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }

		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.execution.moccml.testscenariolang.xtext.TestScenarioLang.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class FiredStateKindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.execution.moccml.testscenariolang.xtext.TestScenarioLang.FiredStateKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTicksKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cDoesnot_tickKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//FiredStateKind trace::FiredStateKind:
		//	'ticks' | 'doesnot_tick';
		@Override public ParserRule getRule() { return rule; }

		//'ticks' | 'doesnot_tick'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'ticks'
		public Keyword getTicksKeyword_0() { return cTicksKeyword_0; }

		//'doesnot_tick'
		public Keyword getDoesnot_tickKeyword_1() { return cDoesnot_tickKeyword_1; }
	}

	public class EnableStateKindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.execution.moccml.testscenariolang.xtext.TestScenarioLang.EnableStateKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cMust_tickKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cCannot_tickKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cIs_freeKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cIs_undeterminedKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		
		//EnableStateKind trace::EnableStateKind:
		//	'must_tick' | 'cannot_tick' | 'is_free' | 'is_undetermined';
		@Override public ParserRule getRule() { return rule; }

		//'must_tick' | 'cannot_tick' | 'is_free' | 'is_undetermined'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'must_tick'
		public Keyword getMust_tickKeyword_0() { return cMust_tickKeyword_0; }

		//'cannot_tick'
		public Keyword getCannot_tickKeyword_1() { return cCannot_tickKeyword_1; }

		//'is_free'
		public Keyword getIs_freeKeyword_2() { return cIs_freeKeyword_2; }

		//'is_undetermined'
		public Keyword getIs_undeterminedKeyword_3() { return cIs_undeterminedKeyword_3; }
	}

	public class LiveStateKindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.gemoc.execution.moccml.testscenariolang.xtext.TestScenarioLang.LiveStateKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cIsAliveKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cIsDeadKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//LiveStateKind LiveStateKind:
		//	'isAlive' | 'isDead';
		@Override public ParserRule getRule() { return rule; }

		//'isAlive' | 'isDead'
		public Alternatives getAlternatives() { return cAlternatives; }

		//'isAlive'
		public Keyword getIsAliveKeyword_0() { return cIsAliveKeyword_0; }

		//'isDead'
		public Keyword getIsDeadKeyword_1() { return cIsDeadKeyword_1; }
	}
	
	
	private final ScenarioElements pScenario;
	private final ImportStatementElements pImportStatement;
	private final ImportJavaStatementElements pImportJavaStatement;
	private final ObjectVariableElements pObjectVariable;
	private final QualifiedNameWithWildCardElements pQualifiedNameWithWildCard;
	private final QualifiedNameElements pQualifiedName;
	private final JvmTypeReferenceElements pJvmTypeReference;
	private final StatementElements pStatement;
	private final MseStatementElements pMseStatement;
	private final RewritingRuleCallStatementElements pRewritingRuleCallStatement;
	private final VariableElements pVariable;
	private final EObjectRefElements pEObjectRef;
	private final StringLiteralElements pStringLiteral;
	private final IntegerLiteralElements pIntegerLiteral;
	private final EStringElements pEString;
	private final FiredStateKindElements pFiredStateKind;
	private final EnableStateKindElements pEnableStateKind;
	private final LiveStateKindElements pLiveStateKind;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TestScenarioLangGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pScenario = new ScenarioElements();
		this.pImportStatement = new ImportStatementElements();
		this.pImportJavaStatement = new ImportJavaStatementElements();
		this.pObjectVariable = new ObjectVariableElements();
		this.pQualifiedNameWithWildCard = new QualifiedNameWithWildCardElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pJvmTypeReference = new JvmTypeReferenceElements();
		this.pStatement = new StatementElements();
		this.pMseStatement = new MseStatementElements();
		this.pRewritingRuleCallStatement = new RewritingRuleCallStatementElements();
		this.pVariable = new VariableElements();
		this.pEObjectRef = new EObjectRefElements();
		this.pStringLiteral = new StringLiteralElements();
		this.pIntegerLiteral = new IntegerLiteralElements();
		this.pEString = new EStringElements();
		this.pFiredStateKind = new FiredStateKindElements();
		this.pEnableStateKind = new EnableStateKindElements();
		this.pLiveStateKind = new LiveStateKindElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.gemoc.execution.moccml.testscenariolang.xtext.TestScenarioLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Scenario:
	//	{Scenario}
	//	'Scenario' name=EString? ((modelImports+=ImportStatement
	//	| classImports+=ImportJavaStatement) (modelImports+=ImportStatement | classImports+=ImportJavaStatement)*)?
	//	(variables+=ObjectVariable variables+=ObjectVariable*)?
	//	statementSequence+=Statement+;
	public ScenarioElements getScenarioAccess() {
		return pScenario;
	}
	
	public ParserRule getScenarioRule() {
		return getScenarioAccess().getRule();
	}

	//ImportStatement TimeModel::ImportStatement:
	//	'importModel'
	//	importURI=EString (alias=';' | 'as' alias=EString ';');
	public ImportStatementElements getImportStatementAccess() {
		return pImportStatement;
	}
	
	public ParserRule getImportStatementRule() {
		return getImportStatementAccess().getRule();
	}

	//ImportJavaStatement:
	//	('importClass' importedNamespace=QualifiedName
	//	| 'importPackage' importedNamespace=QualifiedNameWithWildCard) ';';
	public ImportJavaStatementElements getImportJavaStatementAccess() {
		return pImportJavaStatement;
	}
	
	public ParserRule getImportJavaStatementRule() {
		return getImportJavaStatementAccess().getRule();
	}

	//ObjectVariable:
	//	'Variable'
	//	name=EString
	//	':' type=JvmTypeReference
	//	';';
	public ObjectVariableElements getObjectVariableAccess() {
		return pObjectVariable;
	}
	
	public ParserRule getObjectVariableRule() {
		return getObjectVariableAccess().getRule();
	}

	//QualifiedNameWithWildCard:
	//	QualifiedName '.' '*';
	public QualifiedNameWithWildCardElements getQualifiedNameWithWildCardAccess() {
		return pQualifiedNameWithWildCard;
	}
	
	public ParserRule getQualifiedNameWithWildCardRule() {
		return getQualifiedNameWithWildCardAccess().getRule();
	}

	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//JvmTypeReference types::JvmTypeReference:
	//	{types::JvmAnyTypeReference} type=[types::JvmType|QualifiedName];
	public JvmTypeReferenceElements getJvmTypeReferenceAccess() {
		return pJvmTypeReference;
	}
	
	public ParserRule getJvmTypeReferenceRule() {
		return getJvmTypeReferenceAccess().getRule();
	}

	//Statement:
	//	MseStatement /* | RelationBehavior */ | RewritingRuleCallStatement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}

	//MseStatement:
	//	'expect' {MseStatement} clocks+=[TimeModel::Clock] ('and' clocks+=[TimeModel::Clock])*
	//	';'?;
	public MseStatementElements getMseStatementAccess() {
		return pMseStatement;
	}
	
	public ParserRule getMseStatementRule() {
		return getMseStatementAccess().getRule();
	}

	//RewritingRuleCallStatement:
	//	'execute' {RewritingRuleCallStatement} (objectVariable=[ObjectVariable] '.' method=[types::JvmOperation] ('('
	//	(parameters+=Variable (','parameters+=Variable)*)* ')')?)
	//	';'?;
	public RewritingRuleCallStatementElements getRewritingRuleCallStatementAccess() {
		return pRewritingRuleCallStatement;
	}
	
	public ParserRule getRewritingRuleCallStatementRule() {
		return getRewritingRuleCallStatementAccess().getRule();
	}

	//Variable:
	//	IntegerLiteral | StringLiteral | EObjectRef;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}

	//EObjectRef:
	//	object=[ecore::EObject|QualifiedName];
	public EObjectRefElements getEObjectRefAccess() {
		return pEObjectRef;
	}
	
	public ParserRule getEObjectRefRule() {
		return getEObjectRefAccess().getRule();
	}

	//StringLiteral:
	//	value=STRING;
	public StringLiteralElements getStringLiteralAccess() {
		return pStringLiteral;
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	///*VariableRef:
	// * 	var=[ObjectVariable|ID]
	// ;*/
	//IntegerLiteral:
	//	value=INT;
	public IntegerLiteralElements getIntegerLiteralAccess() {
		return pIntegerLiteral;
	}
	
	public ParserRule getIntegerLiteralRule() {
		return getIntegerLiteralAccess().getRule();
	}

	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//FiredStateKind trace::FiredStateKind:
	//	'ticks' | 'doesnot_tick';
	public FiredStateKindElements getFiredStateKindAccess() {
		return pFiredStateKind;
	}
	
	public ParserRule getFiredStateKindRule() {
		return getFiredStateKindAccess().getRule();
	}

	//EnableStateKind trace::EnableStateKind:
	//	'must_tick' | 'cannot_tick' | 'is_free' | 'is_undetermined';
	public EnableStateKindElements getEnableStateKindAccess() {
		return pEnableStateKind;
	}
	
	public ParserRule getEnableStateKindRule() {
		return getEnableStateKindAccess().getRule();
	}

	//LiveStateKind LiveStateKind:
	//	'isAlive' | 'isDead';
	public LiveStateKindElements getLiveStateKindAccess() {
		return pLiveStateKind;
	}
	
	public ParserRule getLiveStateKindRule() {
		return getLiveStateKindAccess().getRule();
	}

	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
